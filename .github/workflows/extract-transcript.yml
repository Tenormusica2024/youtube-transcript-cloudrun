name: Manual Transcript Extraction

on:
  workflow_dispatch:
    inputs:
      youtube_url:
        description: 'YouTube URL'
        required: true
        default: 'https://www.youtube.com/watch?v='
      language:
        description: 'Language'
        required: true
        default: 'ja'
        type: choice
        options:
        - ja
        - en
        - ko
        - zh
      output_format:
        description: 'Output Format'
        required: true
        default: 'formatted'
        type: choice
        options:
        - formatted
        - raw
        - summary_only

jobs:
  extract-transcript:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install youtube-transcript-api requests
        
    - name: Extract video ID
      id: extract_id
      run: |
        python3 << 'EOF'
        import sys
        from urllib.parse import urlparse, parse_qs
        
        def get_video_id(url):
            try:
                parsed_url = urlparse(url.strip())
                
                # youtu.be format
                if parsed_url.hostname == 'youtu.be':
                    return parsed_url.path[1:]
                
                # youtube.com format
                if parsed_url.hostname in ('www.youtube.com', 'youtube.com'):
                    if parsed_url.path == '/watch':
                        params = parse_qs(parsed_url.query)
                        return params.get('v', [None])[0]
                    if parsed_url.path.startswith('/embed/'):
                        return parsed_url.path.split('/')[2]
                    if parsed_url.path.startswith('/v/'):
                        return parsed_url.path.split('/')[2]
                
                raise ValueError(f"Invalid YouTube URL: {url}")
            except Exception as e:
                print(f"URL parsing error: {e}")
                sys.exit(1)
        
        url = "${{ github.event.inputs.youtube_url }}"
        video_id = get_video_id(url)
        print(f"video_id={video_id}")
        
        # Set output for next step
        with open('video_id.txt', 'w') as f:
            f.write(video_id)
        EOF
        
    - name: Extract transcript
      run: |
        python3 << 'EOF'
        import os
        import json
        import time
        from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
        
        def get_transcript(video_id, lang='ja'):
            try:
                print(f"Extracting transcript for video {video_id} in language {lang}...")
                
                api = YouTubeTranscriptApi()
                
                try:
                    fetched_transcript = api.fetch(video_id, languages=[lang])
                    transcript = fetched_transcript.to_raw_data()
                    print(f"‚úÖ {lang} transcript extracted successfully: {len(transcript)} segments")
                    return transcript, lang
                except NoTranscriptFound:
                    print(f"‚ö†Ô∏è {lang} transcript not found. Trying English...")
                    try:
                        fetched_transcript = api.fetch(video_id, languages=['en'])
                        transcript = fetched_transcript.to_raw_data()
                        print(f"‚úÖ English transcript extracted successfully: {len(transcript)} segments")
                        return transcript, 'en'
                    except NoTranscriptFound:
                        print("‚ùå No transcript found in Japanese or English")
                        return None, None
                        
            except TranscriptsDisabled:
                print("‚ùå Transcripts are disabled for this video")
                return None, None
            except Exception as e:
                print(f"‚ùå Transcript extraction error: {e}")
                return None, None
        
        def format_transcript(transcript):
            if not transcript:
                return ""
            return ' '.join([item['text'] for item in transcript])
        
        def create_summary_with_gemini(text):
            """Gemini AI„Çí‰ΩøÁî®„Åó„ÅüÈ´òÂìÅË≥™Ë¶ÅÁ¥Ñ"""
            try:
                import requests
                import json
                
                # Gemini APIË®≠ÂÆö
                api_key = "AIzaSyBKVL0MW3hbTFX7llfbuF0TL73SKNR2Rfw"
                url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
                
                # „Éó„É≠„É≥„Éó„Éà‰ΩúÊàê
                prompt = f"""‰ª•‰∏ã„ÅÆYouTubeÂ≠óÂπï„ÉÜ„Ç≠„Çπ„Éà„Çí500-800ÊñáÂ≠óÁ®ãÂ∫¶„ÅßË©≥Á¥∞„Å´Ë¶ÅÁ¥Ñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
‰∏ªË¶Å„Å™„Éù„Ç§„É≥„Éà„ÇÑË©±„ÅÆÊµÅ„Çå„ÇíÂê´„ÇÅ„Å¶„ÄÅÂÜÖÂÆπ„ÇíÁêÜËß£„Åó„ÇÑ„Åô„Åè„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„ÉÜ„Ç≠„Çπ„Éà:
{text[:4000]}"""  # „ÉÜ„Ç≠„Çπ„Éà„ÇíÂà∂Èôê
                
                payload = {
                    "contents": [{
                        "parts": [{
                            "text": prompt
                        }]
                    }],
                    "generationConfig": {
                        "temperature": 0.3,
                        "topK": 40,
                        "topP": 0.95,
                        "maxOutputTokens": 1024
                    }
                }
                
                response = requests.post(url, 
                                       headers={'Content-Type': 'application/json'}, 
                                       json=payload, 
                                       timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if 'candidates' in result and len(result['candidates']) > 0:
                        summary = result['candidates'][0]['content']['parts'][0]['text'].strip()
                        print(f"‚úÖ Gemini AIË¶ÅÁ¥ÑÁîüÊàêÊàêÂäü: {len(summary)} ÊñáÂ≠ó")
                        return summary
                    else:
                        print("‚ö†Ô∏è Gemini APIÂøúÁ≠îÂΩ¢Âºè„Ç®„É©„Éº")
                        return create_simple_summary(text)
                else:
                    print(f"‚ö†Ô∏è Gemini API „Ç®„É©„Éº: {response.status_code}")
                    return create_simple_summary(text)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Gemini AIË¶ÅÁ¥Ñ„Ç®„É©„Éº: {e}")
                return create_simple_summary(text)
        
        def create_simple_summary(text):
            """„Ç∑„É≥„Éó„É´„Å™Ë¶ÅÁ¥ÑÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®Ôºâ"""
            sentences = text.split('„ÄÇ')
            important_sentences = [s.strip() + '„ÄÇ' for s in sentences if len(s.strip()) > 15]
            summary_sentences = important_sentences[:min(8, len(important_sentences))]
            return ' '.join(summary_sentences)
        
        # Get parameters
        with open('video_id.txt', 'r') as f:
            video_id = f.read().strip()
        
        lang = "${{ github.event.inputs.language }}"
        output_format = "${{ github.event.inputs.output_format }}"
        youtube_url = "${{ github.event.inputs.youtube_url }}"
        
        # Extract transcript
        transcript, detected_lang = get_transcript(video_id, lang)
        
        if not transcript:
            print("Failed to extract transcript")
            exit(1)
        
        # Format text
        raw_text = format_transcript(transcript)
        formatted_text = raw_text.replace('„ÄÇ', '„ÄÇ\n\n')
        
        # AIË¶ÅÁ¥ÑÁîüÊàê
        print("ü§ñ Gemini AI„ÅßË¶ÅÁ¥ÑÁîüÊàê‰∏≠...")
        summary_text = create_summary_with_gemini(raw_text)
        
        # Prepare output based on format
        if output_format == 'raw':
            output_content = raw_text
        elif output_format == 'summary_only':
            output_content = summary_text
        else:  # formatted
            output_content = formatted_text
        
        # Create timestamp
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
        
        # Write results
        result_data = {
            'video_id': video_id,
            'youtube_url': youtube_url,
            'language': detected_lang,
            'format': output_format,
            'timestamp': timestamp,
            'character_count': len(raw_text),
            'segment_count': len(transcript),
            'content': output_content,
            'summary': summary_text if output_format != 'summary_only' else None
        }
        
        # Save as JSON for GitHub Pages
        with open('result.json', 'w', encoding='utf-8') as f:
            json.dump(result_data, f, ensure_ascii=False, indent=2)
        
        # Save as text file
        with open('transcript_result.txt', 'w', encoding='utf-8') as f:
            f.write(f"YouTube Transcript Extraction Result\n")
            f.write(f"{'='*50}\n")
            f.write(f"Video ID: {video_id}\n")
            f.write(f"URL: {youtube_url}\n")
            f.write(f"Language: {detected_lang}\n")
            f.write(f"Format: {output_format}\n")
            f.write(f"Processed: {timestamp}\n")
            f.write(f"Characters: {len(raw_text)}\n")
            f.write(f"Segments: {len(transcript)}\n")
            f.write(f"\n{'='*50}\n")
            f.write(f"Content:\n")
            f.write(f"{'='*50}\n")
            f.write(output_content)
            
            if output_format != 'summary_only' and summary_text:
                f.write(f"\n\n{'='*50}\n")
                f.write(f"Summary:\n")
                f.write(f"{'='*50}\n")
                f.write(summary_text)
        
        print(f"\n‚úÖ Transcript extraction completed!")
        print(f"üìÑ Character count: {len(raw_text)}")
        print(f"üìä Segment count: {len(transcript)}")
        print(f"üåê Language: {detected_lang}")
        EOF
        
    - name: Create HTML result page with Cloud Run style
      run: |
        cat > result.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ja">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>YouTubeÂ≠óÂπïÊäΩÂá∫ÁµêÊûú</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }
                .container { max-width: 900px; margin: 0 auto; background: white; border-radius: 20px; box-shadow: 0 20px 40px rgba(0,0,0,0.1); overflow: hidden; }
                .header { background: linear-gradient(45deg, #ff6b6b, #ee5a24); color: white; padding: 30px; text-align: center; }
                .header h1 { font-size: 2.5em; margin-bottom: 10px; }
                .header p { opacity: 0.9; font-size: 1.1em; }
                .status-info { background: #e8f5e8; border: 1px solid #4caf50; border-radius: 10px; margin: 20px; padding: 20px; }
                .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }
                .status-item { background: white; padding: 15px; border-radius: 8px; border-left: 4px solid #4caf50; }
                .status-label { font-weight: bold; color: #2e7d32; font-size: 0.9em; }
                .status-value { margin-top: 5px; color: #1b5e20; font-weight: 600; }
                .result-section { padding: 30px; }
                .result-header { font-size: 1.4em; color: #2d3436; margin-bottom: 15px; display: flex; align-items: center; gap: 10px; }
                .result-content { background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 10px; padding: 25px; margin-bottom: 25px; font-size: 16px; line-height: 1.8; white-space: pre-wrap; max-height: 500px; overflow-y: auto; }
                .summary-section { background: #fff3cd; border: 1px solid #ffc107; border-radius: 10px; padding: 25px; margin: 25px 0; }
                .summary-header { color: #856404; font-size: 1.3em; font-weight: bold; margin-bottom: 15px; display: flex; align-items: center; gap: 10px; }
                .summary-content { color: #6c5700; font-size: 16px; line-height: 1.8; white-space: pre-wrap; }
                .buttons { text-align: center; padding: 20px; background: #f8f9fa; }
                .btn { background: linear-gradient(45deg, #667eea, #764ba2); color: white; border: none; padding: 12px 25px; margin: 0 10px; border-radius: 25px; font-size: 16px; font-weight: 600; cursor: pointer; transition: transform 0.3s ease; text-decoration: none; display: inline-block; }
                .btn:hover { transform: translateY(-2px); }
                .download-section { background: linear-gradient(135deg, #74b9ff, #0984e3); color: white; padding: 20px; text-align: center; }
                .download-btn { background: rgba(255,255,255,0.2); color: white; border: 2px solid white; padding: 10px 20px; margin: 0 5px; border-radius: 20px; cursor: pointer; text-decoration: none; display: inline-block; }
                .download-btn:hover { background: rgba(255,255,255,0.3); }
                .success-icon { color: #4caf50; font-size: 2em; margin-bottom: 10px; }
                @media (max-width: 768px) {
                    .container { margin: 10px; border-radius: 10px; }
                    .header { padding: 20px; }
                    .header h1 { font-size: 2em; }
                    .result-section { padding: 20px; }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <div class="success-icon">‚úÖ</div>
                    <h1>YouTubeÂ≠óÂπïÊäΩÂá∫ÂÆå‰∫Ü</h1>
                    <p>GitHub ActionsÁµåÁî±„Åß„ÅÆÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü</p>
                </div>
                
                <div class="status-info">
                    <h3 style="color: #2e7d32; margin-bottom: 15px;">üìä ÊäΩÂá∫ÁµêÊûú„Çµ„Éû„É™„Éº</h3>
                    <div id="status-display">
                        ÁµêÊûú„ÇíË™≠„ÅøËæº„Åø‰∏≠...
                    </div>
                </div>
                
                <div class="result-section">
                    <div class="result-header">
                        <span>üìÑ</span>ÊäΩÂá∫„Åï„Çå„ÅüÂ≠óÂπï„ÉÜ„Ç≠„Çπ„Éà
                    </div>
                    <div class="result-content" id="transcript-content">
                        Ë™≠„ÅøËæº„Åø‰∏≠...
                    </div>
                    
                    <div id="summary-section" style="display: none;">
                        <div class="summary-section">
                            <div class="summary-header">
                                <span>üìã</span>Ë¶ÅÁ¥Ñ
                            </div>
                            <div class="summary-content" id="summary-content">
                                Ë™≠„ÅøËæº„Åø‰∏≠...
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="download-section">
                    <h3 style="margin-bottom: 15px;">üì• „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</h3>
                    <a href="transcript_result.txt" download class="download-btn">üìÑ „ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´</a>
                    <a href="result.json" download class="download-btn">üìä JSONÂΩ¢Âºè</a>
                </div>
                
                <div class="buttons">
                    <button class="btn" onclick="copyToClipboard(document.getElementById('transcript-content').textContent)">üìã ÂÖ®Êñá„Ç≥„Éî„Éº</button>
                    <button class="btn" onclick="copyToClipboard(document.getElementById('summary-content').textContent)" id="copy-summary-btn" style="display: none;">üìù Ë¶ÅÁ¥Ñ„Ç≥„Éî„Éº</button>
                    <button class="btn" onclick="location.reload()">üîÑ ÂÜçË™≠„ÅøËæº„Åø</button>
                </div>
            </div>
            
            <script>
                // Load and display result data
                fetch('result.json')
                    .then(response => response.json())
                    .then(data => {
                        // Display status information
                        const statusHtml = `
                            <div class="status-grid">
                                <div class="status-item">
                                    <div class="status-label">ÂãïÁîªID</div>
                                    <div class="status-value">${data.video_id}</div>
                                </div>
                                <div class="status-item">
                                    <div class="status-label">Ê§úÂá∫Ë®ÄË™û</div>
                                    <div class="status-value">${data.language.toUpperCase()}</div>
                                </div>
                                <div class="status-item">
                                    <div class="status-label">ÊñáÂ≠óÊï∞</div>
                                    <div class="status-value">${data.character_count.toLocaleString()} ÊñáÂ≠ó</div>
                                </div>
                                <div class="status-item">
                                    <div class="status-label">„Çª„Ç∞„É°„É≥„ÉàÊï∞</div>
                                    <div class="status-value">${data.segment_count} „Çª„Ç∞„É°„É≥„Éà</div>
                                </div>
                                <div class="status-item">
                                    <div class="status-label">Âá¶ÁêÜÊó•ÊôÇ</div>
                                    <div class="status-value">${data.timestamp}</div>
                                </div>
                                <div class="status-item">
                                    <div class="status-label">Âá∫ÂäõÂΩ¢Âºè</div>
                                    <div class="status-value">${data.format}</div>
                                </div>
                            </div>
                        `;
                        document.getElementById('status-display').innerHTML = statusHtml;
                        
                        // Display transcript content
                        document.getElementById('transcript-content').textContent = data.content;
                        
                        // Display summary if available
                        if (data.summary && data.format !== 'summary_only') {
                            document.getElementById('summary-section').style.display = 'block';
                            document.getElementById('summary-content').textContent = data.summary;
                            document.getElementById('copy-summary-btn').style.display = 'inline-block';
                        }
                        
                        // Update page title with video ID
                        document.title = `YouTubeÂ≠óÂπïÊäΩÂá∫ÁµêÊûú - ${data.video_id}`;
                        
                    })
                    .catch(error => {
                        document.getElementById('status-display').innerHTML = 
                            `<div style="color: #d32f2f; text-align: center; padding: 20px;">
                                ‚ùå ÁµêÊûú„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü<br>
                                „Ç®„É©„Éº: ${error.message || error}
                            </div>`;
                        document.getElementById('transcript-content').innerHTML = 
                            `<div style="color: #d32f2f; text-align: center;">
                                ÁµêÊûú„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
                            </div>`;
                    });
                
                function copyToClipboard(text) {
                    if (!text || text.trim() === '' || text.trim() === 'Ë™≠„ÅøËæº„Åø‰∏≠...') {
                        alert('‚ùå „Ç≥„Éî„Éº„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
                        return;
                    }
                    
                    navigator.clipboard.writeText(text.trim()).then(() => {
                        // ÊàêÂäüÊôÇ„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
                        const button = event.target;
                        const originalText = button.textContent;
                        button.textContent = '‚úÖ „Ç≥„Éî„ÉºÂÆå‰∫Ü!';
                        button.style.background = '#4caf50';
                        
                        setTimeout(() => {
                            button.textContent = originalText;
                            button.style.background = '';
                        }, 2000);
                    }).catch(() => {
                        alert('‚ùå „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å∏„ÅÆ„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                    });
                }
                
                // Auto-refresh status every 30 seconds if data not loaded
                let refreshInterval = setInterval(() => {
                    if (document.getElementById('transcript-content').textContent === 'Ë™≠„ÅøËæº„Åø‰∏≠...') {
                        location.reload();
                    } else {
                        clearInterval(refreshInterval);
                    }
                }, 30000);
            </script>
        </body>
        </html>
        EOF
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: results/${{ github.run_number }}
        
    - name: Create result summary
      run: |
        echo "## üé¨ Â≠óÂπïÊäΩÂá∫ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä ÁµêÊûú" >> $GITHUB_STEP_SUMMARY
        echo "- **ÂãïÁîªID**: $(cat video_id.txt)" >> $GITHUB_STEP_SUMMARY
        echo "- **Ë®ÄË™û**: ${{ github.event.inputs.language }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ÂΩ¢Âºè**: ${{ github.event.inputs.output_format }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ÊñáÂ≠óÊï∞**: $(wc -c < transcript_result.txt | tr -d ' ') ÊñáÂ≠ó" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê ÁµêÊûúË°®Á§∫" >> $GITHUB_STEP_SUMMARY
        echo "- [üìÑ HTMLÁµêÊûú„Éö„Éº„Ç∏](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/results/${{ github.run_number }}/result.html)" >> $GITHUB_STEP_SUMMARY
        echo "- [üì• „ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/results/${{ github.run_number }}/transcript_result.txt)" >> $GITHUB_STEP_SUMMARY
        echo "- [üìä JSONÂΩ¢Âºè](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/results/${{ github.run_number }}/result.json)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã „Éó„É¨„Éì„É•„Éº" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        head -c 300 transcript_result.txt | tail -c +200 >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "..." >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: transcript-results
        path: |
          transcript_result.txt
          result.json
          result.html