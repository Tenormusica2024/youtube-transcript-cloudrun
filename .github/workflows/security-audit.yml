name: 🔒 Security Audit & Deploy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-audit:
    name: 🔍 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Scan for secrets
        uses: trufflesecurity/trufflehog@v3.63.2
        with:
          path: .
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🚨 Check for hardcoded API keys
        run: |
          echo "Checking for hardcoded API keys..."
          if grep -r "AIzaSy[A-Za-z0-9_-]\{33\}" . --exclude-dir=.git; then
            echo "❌ CRITICAL: Hardcoded API keys found!"
            exit 1
          else
            echo "✅ No hardcoded API keys found"
          fi

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🛡️ Security linting with Bandit
        run: |
          bandit -r . -x ./tests/ -f json -o bandit-report.json || true
          bandit -r . -x ./tests/

      - name: 🔐 Check for known vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run tests
        run: |
          # Test without API key (core functionality should work)
          python -c "
          import os
          os.environ['YOUTUBE_API_KEY'] = ''
          import app_cloud_run
          print('✅ App works without API key')
          "

      - name: 🐳 Build Docker image
        run: |
          docker build -t youtube-transcript-secure:${{ github.sha }} .
          echo "✅ Docker image builds successfully"